{"version":3,"sources":["components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Board","useState","player","setPlayer","gameState","setGameState","status","checkForWinner","playerTurn","console","log","takeTurn","id","renderSquare","i","className","Square","gameEnd","setFilled","tik","setTik","disable","setDisable","disabled","onClick","win","length","p0","filter","item","map","px","win0","isSuperset","Set","winX","set","subset","elem","has","Game","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1262916.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './Game.css'\n\nconst Board = () => {\n    // 1st player is X ie 1\n    // State keeps track of next player and gameState\n    const [player, setPlayer] = useState(1);\n    const [gameState, setGameState] = useState([]);\n   \n    //const [disable,setDisable] = useState(false);\n    \n    let status = `Winner is ${checkForWinner(gameState)}`;\n\n    // Part 1 step 1 code goes here\n    // Use conditional logic to set a variable to either 'Player O' or  'Player X'\n    let playerTurn = `Next Player: ${player == '0' ? 'Player O' : 'Player X'}`;\n\n    console.log(`We hav a winner ${status}`);\n\n    const takeTurn = (id) => {\n        setGameState([...gameState, { id: id, player: player}]);\n        setPlayer((player + 1) % 2); // get next player\n        return player;\n    };\n    // const disableCell = (val) => {\n    //     setDisable(val);\n    //     return disable;\n    // }\n    function renderSquare(i) {\n        // use properties to pass callback function takeTurn to Child\n        return <Square takeTurn={takeTurn} id={i} ></Square>;\n    }\n\n    return (\n        <div className=\"game-board\">\n            <div className=\"grid-row\">\n                {renderSquare(0)}\n                {renderSquare(1)}\n                {renderSquare(2)}\n            </div>\n            <div className=\"grid-row\">\n                {renderSquare(3)}\n                {renderSquare(4)}\n                {renderSquare(5)}\n            </div>\n            <div className=\"grid-row\">\n                {renderSquare(6)}\n                {renderSquare(7)}\n                {renderSquare(8)}\n            </div>\n            <div id=\"info\">\n                <h1 id=\"turn\">{playerTurn}</h1>\n                <h1>{status}</h1>\n            </div>\n        </div>\n    );\n};\n\nconst Square = ({ takeTurn, id, gameEnd}) => {\n    const mark = ['O', 'X', ' '];\n    // id is the square's number\n    // filled tells you if square has been filled\n    // tik tells you symbol in square (same as player)\n    // You call takeTurn to tell Parent that the square has been filled\n    const [filled, setFilled] = useState(false);\n    const [tik, setTik] = useState(2);\n    const [disable,setDisable] = useState(false);\n    \n    // const disableACell = (val) => {\n    //     disableCell(val);\n    // }\n\n    return (\n        <button\n            // Part 2: update the return statement below to add css classes\n            className={tik == '1' ? 'red' : 'white'}\n            disabled = {disable}\n            onClick={() => {\n                setTik(takeTurn(id));\n                setFilled(true);\n                setDisable(true);\n                console.log(`Square: ${id} filled by player : ${tik}`);\n            }}\n        >\n            <h1>{mark[tik]}</h1>\n        </button>\n    );\n};\n\nconst Game = () => {\n    return (\n        <div className=\"game\">\n            <Board></Board>\n        </div>\n    );\n};\n\n// Checking for Winner takes a bit of work\n// Use JavaScript Sets to check players choices\n// against winning combinations\n// Online there is more compact version but I prefer this one\n\nconst win = [\n    // rows\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    // cols\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    // diagonal\n    [0, 4, 8],\n    [2, 4, 6],\n];\n\nconst checkPlayerTurn = (gameState) => {\n    return gameState.player;\n};\n\nconst checkForWinner = (gameState) => {\n    // get array of box id's\n    // can't be a winner in less than 5 turns\n    if (gameState.length < 5) return 'No Winner Yet';\n    let p0 = gameState.filter((item) => {\n        if (item.player == 0) return item;\n    });\n    p0 = p0.map((item) => item.id);\n    let px = gameState.filter((item) => {\n        if (item.player == 1) return item;\n    });\n    px = px.map((item) => item.id);\n    if (p0 != null && px != null) {\n        var win0 = win.filter((item) => {\n            return isSuperset(new Set(p0), new Set(item));\n        });\n        var winX = win.filter((item) => {\n            return isSuperset(new Set(px), new Set(item));\n        });\n    }\n    \n    if (win0.length > 0) {\n        \n        return 'Player O ';\n    }\n    else if (winX.length > 0){\n        \n        return 'Player X ';\n    }\n    return 'No Winner Yet';\n};\n// check if subset is in the set\nfunction isSuperset(set, subset) {\n    for (let elem of subset) {\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport default Game","import Game from './components/Game'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}